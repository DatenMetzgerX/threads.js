{"version":3,"sources":["../src/job.js"],"names":[],"mappings":";;;;AACA;;;;;;;;;;;;IAEqB,G;;;AACnB,eAAY,IAAZ,EAAkB;AAAA;;AAAA,iDAChB,wBADgB;;AAEhB,UAAK,IAAL,GAAc,IAAd;AACA,UAAK,MAAL,GAAc,IAAd;;AAEA,UAAK,OAAL,GAAe,EAAf;AACA,UAAK,QAAL,GAAgB,EAAhB;;AAEA,SAAK,IAAL,CAAU,QAAV;AARgB;AASjB;;gBAED,G,kBAAa;AAAA,sCAAN,IAAM;AAAN,UAAM;AAAA;;AACX,QAAI,KAAK,MAAL,KAAgB,CAApB,EAAuB;AACrB,YAAM,IAAI,KAAJ,CAAU,uCAAV,CAAN;AACD;;AAED,SAAK,OAAL,GAAe,IAAf;AACA,WAAO,IAAP;AACD,G;;gBAED,I,mBAAc;AACZ,QAAI,KAAK,OAAL,CAAa,MAAb,KAAwB,CAA5B,EAA+B;AAC7B,YAAM,IAAI,KAAJ,CAAU,+BAAV,CAAN;AACD;;AAHW,uCAAN,IAAM;AAAN,UAAM;AAAA;;AAKZ,SAAK,QAAL,GAAgB,IAAhB;;AAEA,SAAK,IAAL,CAAU,YAAV;AACA,WAAO,IAAP;AACD,G;;gBAED,S,sBAAU,M,EAAQ;AAAA;;AAChB,yDACG,IADH,CACQ,SADR,EACmB,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,EAAqB,MAArB,CADnB,EAEG,IAFH,CAEQ,OAFR,EAEiB,KAAK,IAAL,CAAU,IAAV,CAAe,IAAf,EAAqB,OAArB,CAFjB,GAGG,GAHH,0BAGU,KAAK,OAHf,GAIG,IAJH,8BAIW,KAAK,QAJhB;;AAMA,SAAK,MAAL,GAAc,MAAd;AACA,SAAK,IAAL,CAAU,eAAV;AACA,WAAO,IAAP;AACD,G;;gBAED,O,sBAAU;AAAA;;AACR;AACA,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAa;AAC9B;AACA,UAAI,CAAC,OAAK,MAAV,EAAkB;AAChB,eAAK,IAAL,CAAU,eAAV,EAA2B,YAAM;AAC/B,kBAAQ,OAAK,MAAL,CAAY,OAAZ,EAAR;AACD,SAFD;AAGD,OAJD,MAIO;AACL,gBAAQ,OAAK,MAAL,CAAY,OAAZ,EAAR;AACD;AACF,KATM,CAAP;AAUD,G;;gBAED,O,sBAAW;AACT,SAAK,kBAAL;AACA,WAAO,KAAK,OAAZ;AACA,WAAO,KAAK,QAAZ;AACD,G;;;;;kBA9DkB,G","file":"job.js","sourcesContent":["\nimport EventEmitter from 'eventemitter3';\n\nexport default class Job extends EventEmitter {\n  constructor(pool) {\n    super();\n    this.pool   = pool;\n    this.thread = null;\n\n    this.runArgs = [];\n    this.sendArgs = [];\n\n    pool.emit('newJob', this);\n  }\n\n  run(...args) {\n    if (args.length === 0) {\n      throw new Error('Cannot call .run() without arguments.');\n    }\n\n    this.runArgs = args;\n    return this;\n  }\n\n  send(...args) {\n    if (this.runArgs.length === 0) {\n      throw new Error('Cannot .send() before .run().');\n    }\n\n    this.sendArgs = args;\n\n    this.emit('readyToRun');\n    return this;\n  }\n\n  executeOn(thread) {\n    thread\n      .once('message', this.emit.bind(this, 'done'))\n      .once('error', this.emit.bind(this, 'error'))\n      .run(...this.runArgs)\n      .send(...this.sendArgs);\n\n    this.thread = thread;\n    this.emit('threadChanged');\n    return this;\n  }\n\n  promise() {\n    // Always return a promise\n    return new Promise((resolve) => {\n      // If the thread isn't set, listen for the threadChanged event\n      if (!this.thread) {\n        this.once('threadChanged', () => {\n          resolve(this.thread.promise());\n        });\n      } else {\n        resolve(this.thread.promise());\n      }\n    });\n  }\n\n  destroy () {\n    this.removeAllListeners();\n    delete this.runArgs;\n    delete this.sendArgs;\n  }\n}\n"]}