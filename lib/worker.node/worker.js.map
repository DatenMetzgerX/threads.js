{"version":3,"sources":["../../src/worker.node/worker.js"],"names":[],"mappings":";;;;AAAA;;;;AACA;;;;AACA;;;;AAEA;;;;;;;;;;IAGqB,M;;;AACnB,kBAAY,eAAZ,EAA2C;AAAA,QAAd,OAAc,yDAAJ,EAAI;;AAAA;;AAAA,iDACzC,wBADyC;;AAGzC,UAAK,KAAL,GAAa,wBAAM,IAAN,CAAW,eAAK,IAAL,CAAU,SAAV,EAAqB,UAArB,CAAX,EAA6C,EAA7C,EAAiD,OAAjD,CAAb;AACA,UAAK,KAAL,CAAW,EAAX,CAAc,SAAd,EAAyB,MAAK,aAAL,CAAmB,IAAnB,OAAzB;AACA,UAAK,KAAL,CAAW,EAAX,CAAc,OAAd,EAAuB,MAAK,WAAL,CAAiB,IAAjB,OAAvB;AACA,UAAK,KAAL,CAAW,EAAX,CAAc,MAAd,EAAsB,MAAK,IAAL,CAAU,IAAV,QAAqB,MAArB,CAAtB;;AAEA,QAAI,eAAJ,EAAqB;AACnB,YAAK,GAAL,CAAS,eAAT;AACD;AAVwC;AAW1C;;mBAED,G,gBAAI,K,EAAO;AACT,QAAI,OAAO,KAAP,KAAiB,UAArB,EAAiC;AAC/B,WAAK,SAAL,CAAe,KAAf;AACD,KAFD,MAEO;AACL,WAAK,SAAL,CAAe,KAAf;AACD;AACD,WAAO,IAAP;AACD,G;;mBAED,S,sBAAU,M,EAAQ;AAChB,SAAK,KAAL,CAAW,IAAX,CAAgB;AACd,oBAAe,IADD;AAEd,cAAe,OAAO,QAAP;AAFD,KAAhB;AAID,G;;mBAED,S,sBAAU,M,EAAQ;AAChB,QAAI,CAAC,MAAL,EAAa;AAAE,YAAM,IAAI,KAAJ,CAAU,iDAAV,CAAN;AAAqE;;AAEpF,QAAM,qBAAqB,eAAK,IAAL,CAAU,yBAAY,QAAZ,CAAqB,IAA/B,EAAqC,MAArC,CAA3B;;AAEA;AACA,SAAK,KAAL,CAAW,IAAX,CAAgB;AACd,oBAAe,IADD;AAEd,cAAe,eAAK,OAAL,CAAa,kBAAb;AAFD,KAAhB;AAID,G;;mBAED,I,iBAAK,K,EAAO;AACV,SAAK,KAAL,CAAW,IAAX,CAAgB;AACd,aAAQ,IADM;AAEd;AAFc,KAAhB;AAIA,WAAO,IAAP;AACD,G;;mBAED,I,mBAAO;AACL,SAAK,KAAL,CAAW,IAAX;AACA,WAAO,IAAP;AACD,G;;mBAED,O,sBAAU;AAAA;;AACR,WAAO,IAAI,OAAJ,CAAY,UAAC,OAAD,EAAU,MAAV,EAAqB;AACtC,aACG,IADH,CACQ,SADR,EACmB,OADnB,EAEG,IAFH,CAEQ,OAFR,EAEiB,MAFjB;AAGD,KAJM,CAAP;AAKD,G;;mBAED,a,0BAAc,O,EAAS;AACrB,QAAI,QAAQ,KAAZ,EAAmB;AACjB,UAAM,QAAQ,IAAI,KAAJ,CAAU,QAAQ,KAAR,CAAc,OAAxB,CAAd;AACA,YAAM,KAAN,GAAc,QAAQ,KAAR,CAAc,KAA5B;;AAEA,WAAK,WAAL,CAAiB,KAAjB;AACD,KALD,MAKO,IAAI,QAAQ,QAAZ,EAAsB;AAC3B,WAAK,cAAL,CAAoB,QAAQ,QAA5B;AACD,KAFM,MAEA;AACL,WAAK,IAAL,cAAU,SAAV,SAAwB,QAAQ,QAAhC;AACA,WAAK,IAAL,cAAU,MAAV,SAAqB,QAAQ,QAA7B,GAA2C;AAC5C;AACF,G;;mBAED,c,2BAAe,Q,EAAU;AACvB,SAAK,IAAL,CAAU,UAAV,EAAsB,QAAtB;AACD,G;;mBAED,W,wBAAY,K,EAAO;AACjB,QAAI,CAAC,KAAK,SAAL,CAAe,OAAf,EAAwB,IAAxB,CAAL,EAAoC;AAClC,cAAQ,KAAR,CAAc,MAAM,KAAN,IAAe,KAA7B,EAA2C;AAC5C;AACD,SAAK,IAAL,CAAU,OAAV,EAAmB,KAAnB;AACD,G;;;;;kBAtFkB,M","file":"worker.js","sourcesContent":["import child        from 'child_process';\nimport path         from 'path';\nimport EventEmitter from 'eventemitter3';\n\nimport { getConfig } from '../config';\n\n\nexport default class Worker extends EventEmitter {\n  constructor(initialRunnable, options = {}) {\n    super();\n\n    this.slave = child.fork(path.join(__dirname, 'slave.js'), [], options);\n    this.slave.on('message', this.handleMessage.bind(this));\n    this.slave.on('error', this.handleError.bind(this));\n    this.slave.on('exit', this.emit.bind(this, 'exit'));\n\n    if (initialRunnable) {\n      this.run(initialRunnable);\n    }\n  }\n\n  run(toRun) {\n    if (typeof toRun === 'function') {\n      this.runMethod(toRun);\n    } else {\n      this.runScript(toRun);\n    }\n    return this;\n  }\n\n  runMethod(method) {\n    this.slave.send({\n      initByMethod : true,\n      method       : method.toString()\n    });\n  }\n\n  runScript(script) {\n    if (!script) { throw new Error('Must pass a function or a script path to run().'); }\n\n    const prefixedScriptPath = path.join(getConfig().basepath.node, script);\n\n    // attention: single script for node, array for browser\n    this.slave.send({\n      initByScript : true,\n      script       : path.resolve(prefixedScriptPath)\n    });\n  }\n\n  send(param) {\n    this.slave.send({\n      doRun : true,\n      param\n    });\n    return this;\n  }\n\n  kill() {\n    this.slave.kill();\n    return this;\n  }\n\n  promise() {\n    return new Promise((resolve, reject) => {\n      this\n        .once('message', resolve)\n        .once('error', reject);\n    });\n  }\n\n  handleMessage(message) {\n    if (message.error) {\n      const error = new Error(message.error.message);\n      error.stack = message.error.stack;\n\n      this.handleError(error);\n    } else if (message.progress) {\n      this.handleProgress(message.progress);\n    } else {\n      this.emit('message', ...message.response);\n      this.emit('done', ...message.response);    // this one is just for convenience\n    }\n  }\n\n  handleProgress(progress) {\n    this.emit('progress', progress);\n  }\n\n  handleError(error) {\n    if (!this.listeners('error', true)) {\n      console.error(error.stack || error);       // eslint-disable-line no-console\n    }\n    this.emit('error', error);\n  }\n}\n"]}