{"version":3,"sources":["../src/config.js"],"names":[],"mappings":";;;;;;QA2CgB,S,GAAA,S;QAIA,S,GAAA,S;AA/ChB,IAAI,gBAAgB;AAClB,YAAW;AACT,UAAO,EADE;AAET,SAAO;AAFE,GADO;AAKlB,YAAW;AACT,oBAAiB;AADR;AALO,CAApB;;AAUA,SAAS,eAAT,CAAyB,OAAzB,EAAkC,MAAlC,EAA8D;AAAA,MAApB,aAAoB,yDAAJ,EAAI;;AAC5D,SAAO,IAAP,CAAY,MAAZ,EAAoB,OAApB,CAA4B,UAAC,OAAD,EAAa;AACvC,QAAI,WAAW,OAAQ,OAAR,CAAf;AACA,QAAM,uBAAuB,cAAc,MAAd,CAAqB,CAAE,OAAF,CAArB,CAA7B;;AAEA,QAAI,QAAO,QAAP,yCAAO,QAAP,OAAoB,QAAxB,EAAkC;AAChC,UAAI,OAAO,QAAS,OAAT,CAAP,KAA8B,WAA9B,IAA6C,QAAO,QAAS,OAAT,CAAP,MAA8B,QAA/E,EAAyF;AACvF,cAAM,IAAI,KAAJ,CAAU,mDAAmD,qBAAqB,IAArB,CAA0B,GAA1B,CAA7D,CAAN;AACD;AACD,sBAAgB,QAAS,OAAT,CAAhB,EAAoC,QAApC,EAA8C,oBAA9C;AACD,KALD,MAKO;AACL,UAAI,QAAO,QAAS,OAAT,CAAP,MAA8B,QAAlC,EAA4C;AAC1C,cAAM,IAAI,KAAJ,CAAU,+CAA+C,qBAAqB,IAArB,CAA0B,GAA1B,CAAzD,CAAN;AACD;AACD,cAAS,OAAT,IAAqB,QAArB;AACD;AACF,GAfD;AAgBD;;AAED,IAAM,SAAS;AACb,OAAK;AAAA,WAAM,aAAN;AAAA,GADQ;;AAGb,OAAK,aAAC,SAAD,EAAe;AAClB,QAAI,QAAO,SAAP,yCAAO,SAAP,OAAqB,QAAzB,EAAmC;AACjC,YAAM,IAAI,KAAJ,CAAU,yBAAV,CAAN;AACD;;AAED,oBAAgB,aAAhB,EAA+B,SAA/B;AACD;AATY,CAAf;;kBAYe,M;AAER,SAAS,SAAT,GAAsB;AAC3B,SAAO,OAAO,GAAP,EAAP;AACD;;AAEM,SAAS,SAAT,GAA6B;AAClC,SAAO,OAAO,GAAP,yBAAP;AACD","file":"config.js","sourcesContent":["let configuration = {\n  basepath : {\n    node : '',\n    web  : ''\n  },\n  fallback : {\n    slaveScriptUrl : ''\n  }\n};\n\nfunction configDeepMerge(destObj, srcObj, ancestorProps = []) {\n  Object.keys(srcObj).forEach((propKey) => {\n    let srcValue = srcObj[ propKey ];\n    const ancestorPropsAndThis = ancestorProps.concat([ propKey ]);\n\n    if (typeof srcValue === 'object') {\n      if (typeof destObj[ propKey ] !== 'undefined' && typeof destObj[ propKey ] !== 'object') {\n        throw new Error('Expected config property not to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      configDeepMerge(destObj[ propKey ], srcValue, ancestorPropsAndThis);\n    } else {\n      if (typeof destObj[ propKey ] === 'object') {\n        throw new Error('Expected config property to be an object: ' + ancestorPropsAndThis.join('.'));\n      }\n      destObj[ propKey ] = srcValue;\n    }\n  });\n}\n\nconst config = {\n  get: () => configuration,\n\n  set: (newConfig) => {\n    if (typeof newConfig !== 'object') {\n      throw new Error('Expected config object.');\n    }\n\n    configDeepMerge(configuration, newConfig);\n  }\n};\n\nexport default config;\n\nexport function getConfig () {\n  return config.get();\n}\n\nexport function setConfig (...args) {\n  return config.set(...args);\n}\n"]}